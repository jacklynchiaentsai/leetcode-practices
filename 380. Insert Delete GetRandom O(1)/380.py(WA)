class listNode:
    def __init__(self, val):
        self.val = val
        self.prev = None
        self.next = None

class RandomizedSet:

    def __init__(self):
        self.head = listNode(-1)
        self.tail = listNode(-1)
        self.head.next = self.tail
        self.tail.prev = self.head
        self.node_dict = {}
    
    def insertend(self, node):
        endNode = self.tail.prev
        endNode.next = node
        node.prev = endNode
        node.next = self.tail
        self.tail.prev = node

    def removenode(self, node):
        prevNode = node.prev
        nextNode = node.next
        prevNode.next = nextNode
        nextNode.prev = prevNode

    def insert(self, val: int) -> bool:
        if val in self.node_dict:
            return False
        
        newNode = listNode(val)
        self.node_dict[val] = newNode
        self.insertend(newNode)
        return True

    def remove(self, val: int) -> bool:
        if val not in self.node_dict:
            return False
        
        node = self.node_dict[val]
        self.removenode(node)
        del self.node_dict[val]
        return True

    def getRandom(self) -> int:
        curNode = self.head.next
        curval = curNode.val
        self.removenode(curNode)
        self.insertend(curNode)
        return curval
    


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()

"""
getRandom: return the head node of linkedlist --> place the head node at the end
node_dict = {val: node}
"""
